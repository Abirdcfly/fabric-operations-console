ARG ARCH
ARG REGISTRY
ARG NODE_VER

FROM $REGISTRY/node.$ARCH:$NODE_VER-ubi8 as client

ENV SERVER_HOME=/home/athena
ENV CLIENT_HOME=/home/athena/apollo

# Create app directory
RUN mkdir -p $SERVER_HOME

# Bundle app source
COPY . $SERVER_HOME
WORKDIR $SERVER_HOME

WORKDIR $SERVER_HOME/apollo

RUN npm ci \
&& npm run build

FROM $REGISTRY/node.$ARCH:$NODE_VER-ubi8 as server
ARG IBP_VER
ARG CONSOLE_TAG
ARG BUILD_ID
ARG BUILD_DATE

LABEL name="IBM Blockchain Platform Console" \
	io.k8s.display-name="IBM Blockchain Platform Console" \
	summary="The console image for IBM Blockchain Platform." \
	description="This image contains the console for the IBM Blockchain Platform and Red Hat UBI 8 as the base OS." \
	io.k8s.description="This image contains the console for the IBM Blockchain Platform and Red Hat UBI 8 as the base OS." \
	vendor="IBM" \
	maintainer="IBM" \
	version=$IBP_VER \
	console_version=$CONSOLE_TAG \
	release=$BUILD_ID \
	ibp.build-date=$BUILD_DATE \
	io.openshift.tags="blockchain"

ENV SERVER_HOME=/home/athena
ENV CLIENT_HOME=/home/athena/apollo
COPY . $SERVER_HOME
WORKDIR $SERVER_HOME

# Allows us to bake the license acceptance into the image for Saas
ARG LICENSE_HARDCODE=false
ENV LICENSE=$LICENSE_HARDCODE

RUN microdnf update \
&& npm install --production --no-save \
# Make sure we can see what packages are getting installed
&& npm ls --production > npm_ls_prod.txt \
&& microdnf clean all || true

COPY --from=client $CLIENT_HOME/build $SERVER_HOME/apollo/build
EXPOSE 3000

ADD licenses/*.tar /licenses
COPY licenses/docker-entrypoint.sh /docker-entrypoint.sh
RUN chown -R node:node /home /licenses
USER node

ENTRYPOINT ["/docker-entrypoint.sh"]
CMD [ "npm", "start" ]